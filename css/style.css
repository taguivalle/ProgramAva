/* Root se le conoce como pseudo elementos; es decir los elementos que no existen en el código HTML. */
:root {
    /* Root es una forma de almacenar variables de CSS que se les conoce como custom properties. */
    --blanco: #ffffff;
    /* Se crea una paleta de colores y se finaliza con dos puntos y posteriormente el color. */
    --oscuro: #212121;
    --primario: #ffc107;
    --secundario: #0097a7;
    --gris: #757575;
    --fuente-principal: 3.8rem;
    --grisclaro: #dfe9f3;
}

/* Al anterior bloque :root se le conoce como la variables de CSS. */

/* apply a natural box layout model to all elements, but allowing components to change estraído 
de https://www.paulirish.com/2012/box-sizing-border-box-ftw/ */
html {
    font-size: 62.5%;
    /* Hack para box model. */
    box-sizing: border-box;
    /* En esta línea vamos definir el Scroll Snap de arriba hacia abajo. la letra y es el eje vertical sí 
  quisieramos el scroll de forma horizontal escribiríamos la letra x. Esto es para todo el HTML. 
  scroll-snap-type: y mandatory;*/
}

/* Desde aquí se le da la opción de hacer scroll hasta los servicios. */
.servicios,

/* La navegación es para que tenga el mismo comportamiento del scroll. */
.navegacion {
    scroll-snap-align: center;
    /* Es para detener el scroll aquí en servicios. */
    scroll-snap-stop: always;
    /* Es decir por más que se haga el scroll hacia abajo no nos va dejar. */
}

/* Con el asterisco selecciona todos los elementos del HTML, es como un selector universal */
*,
*:before,
*:after {
    box-sizing: inherit;
}

body {
    /* 1 rem Es = a 10px*/
    font-size: 16px;
    /* Con esta línea se le cambia el tipo de fuente a todo el cuerpo de la página. */
    font-family: 'Krub', sans-serif;
    /* Con esta línea hacemos un degradado de abajo hacia arriba de forma automática.*/
    background-image: linear-gradient(to top, var(--grisclaro) 0%, var(--blanco) 100%);
    font-family: "Lato", sans-serif;
    transition: background-color .5s;
}

/* Aquí nos encontramos con los estilos del título principal. */
.title span {
    text-align: center;
    font-size: 2rem;
    font-size: var(--fuente-principal);
    color: var(--oscuro);
}

/* Aquí nos encontramos con los sidenav. */
.sidenav {
    height: 100%;
    width: 0;
    position: fixed;
    z-index: 1;
    top: 0;
    left: 0;
    background-color: #111;
    overflow-x: hidden;
    transition: 0.5s;
    padding-top: 60px;
}

.sidenav a {
    padding: 8px 8px 8px 32px;
    text-decoration: none;
    font-size: 25px;
    color: #818181;
    display: block;
    transition: 0.3s;
}

.sidenav a:hover {
    color: #f1f1f1;
}

.sidenav .closebtn {
    position: absolute;
    top: 0;
    right: 25px;
    font-size: 36px;
    margin-left: 50px;
}

#main {
    transition: margin-left .5s;
    padding: 16px;
}

@media screen and (max-height: 450px) {
    .sidenav {
        padding-top: 15px;
    }

    .sidenav a {
        font-size: 18px;
    }
}

/* En este bloque de la clase sombra se copió el color de la página cssmatic. */
.sombra {
    /*-webkit-box-shadow: 0px 5px 15px 0px rgba(112,112,122,0.54);
  -moz-box-shadow: 0px 5px 15px 0px rgba(112,112,122,0.54); */
    box-shadow: 0px 5px 15px 0px rgba(112, 112, 122, 0.54);
    background-color: var(--blanco);
    padding: 2rem;
    border-radius: 1rem;
}

/* En estos heading h1, h2 y h3 se les asigna una regla para la tipografía. */
h1 {
    font-size: 3.8rem;
}

h2 {
    font-size: 2.8rem;
}

h3 {
    font-size: 1.8rem;
}

/* Con esta regla se pueden centrar todos los heading h1, h2 y h3. */
h1,
h2,
h3 {
    text-align: center;
}

.contenedor {
    /* Aquí se toman 1200px como máximo. Y solamente sí hay ese espacio disponible. */
    max-width: 120rem;
    /* Esta línea representa el alto hacia arriba, del lado derecho, del alto de abajo y del lado izquierdo. */
    margin: 0 auto;
}

/* Aquí vamos a crear los estilos de la clase boton, */
.boton {
    background-color: var(--secundario);
    color: var(--blanco);
    padding: 1rem, 3rem;
    margin-top: 1rem;
    font-size: 2rem;
    text-decoration: none;
    text-transform: uppercase;
    font-weight: bold;
    border-radius: .5rem;
    width: 90%;
    text-align: center;
    border: none;
}

/* Aquí traemos nuestra mq. */
@media (min-width: 768px) {
    .boton {
        width: auto;
    }
}

/* Aquí le damos el estilo de un cursor cuando pase sobre el boton. */
.boton:hover {
    cursor: pointer;
}

/* En este bloque le vamos a dar estilos a unas utilidades al flex y la utilidad derecha. */
.w-sm-100 {
    width: 100%;
}

/* Aquí le realizamos un media query al w-sm-100; sm es de small.*/
@media (min-width: 768px) {
    .w-sm-100 {
        width: auto;
    }
}

.flex {
    display: flex;
}

/* En este bloque le damos los estilos al botón enviar. */
.alinear-derecha {
    justify-content: flex-end;
}

/* Aquí tenemos los estilos de la navegación principal. */
.nav-bg {
    background-color: var(--secundario);
    text-align: right;
}

.navegacion-principal {
    /* Por medio de este comando nos habilita flex box y a su vez tenemos acceso a nuevas propiedades*/
    display: flex;
    /* Por medio de este comando nos permite darle una dirección a la fila. flex-direction: column; Como su nombre lo indica 
  nos habilita el flex pero en columnas. */
    flex-direction: column;
}

/* Aquí traemos el media querie que acabamos de crear en css.json. */
/* A partir de este bloque vamos a agregar nuestro primer media query. a la navegación principal. */
/* Ahora con esta arroba nos indica que el siguiente código se a ejecutar unicamente en esa condición. */
@media (min-width: 768px) {
    .navegacion-principal {
        /* Con este comando nos permite mover el contenido horizontalmente. Aunque también lo permite hacerlo verticalmente; pero, con otros cambios. */
        flex-direction: row;
        /*Con este comando lo coloca del lado izquierdo, ya sea que lo quieras al centro a la derecha o izquierda.*/
        justify-content: right;
        /*justify-content: space-between;*/
    }
}

.navegacion-principal a {
    display: block;
    text-align: center;
    color: var(--blanco);
    /* La propiedad CSS text-decoration se usa para establecer el formato de texto a subrayado 
  ( underline ) y suprarrayado ( overline ), tachado ( line-through ) o parpadeo ( blink ). El subrayado y el 
  suprarrayado son posicionados bajo el texto, mientras la línea a través de éste se posiciona por encima. */
    text-decoration: none;
    font-size: 2rem;
    font-weight: 700;
    /* El padding en CSS es una propiedad o relleno que se crea alrededor del contenido de un 
  elemento dentro de los bordes definidos y sirve para dar formato y diseño a una página web. Recordemos que, el 
  padding se aplica de la orilla hacia adentro, de afuera hacia adentro. */
    padding: 1rem;
}

/*BEM: Bloques de Elemento y Modificadores. O sea con una clase principal. */
/* UTILITY FIRST: Básicamente creamos una clase con una sola propiedad que describe qué es lo que haría; Por ejemplo,
sí se quiere centrar el texto, se crea una clase llamada text center y dentro de lo que viene siendo el código 
CSS para centrar ese texto. */
/* MÓDULOS:  con estos estilos se definen los estilos principales y después de van seleccionando cada uno de los 
elementos HTML; Entonces, se define como una clase padre y se van seleccionando todas las etiquetas del código HTML. */
.navegacion-principal a:hover {
    /* En este bloque nos dará un efecto al momento de pasar el mouse únicamente donde 
  se encuentra el enlace o el display-inline. */
    background-color: var(--primario);
    /* Con este comando le damos el color oscuro al texto de los enlaces. */
    color: var(--oscuro);
}

.hero {
    /* Aquí se llama la url de nuestra imágen a mostrar en la página. */
    background-image: url(../img/hero.jpg);
    /* Como su nombre lo dice para que no se repita. */
    background-repeat: no-repeat;
    /* Para que tome todo el ancho de la página. */
    background-size: cover;
    height: 450px;
    position: relative;
    margin-bottom: 2rem;
}

/* Posición absoluta y posición relativa; pero el padre .hero debe de tener una posición relativa para que el hijo
tenga una posición absoluta. */
.contenido-hero {
    position: absolute;
    background-color: rgba(0, 0, 0, .7);
    /* Anterior. */
    background-color: rgb(0 0 0 /70%);
    width: 100%;
    height: 100%;
    /* Para alinear todos los elementos dentro de la imagen pero horizontalmente. */
    display: flex;
    flex-direction: column;
    /* Con este atributo se puede centrar el contenido. */
    align-items: center;
    /* Para alinear todos los elementos dentro de la imagen pero verticalmente. */
    justify-content: center;
    /* Desde el display: flex hasta esta línea se puede utilizar en todos los proyectos
  para alinear horizontalmente hasta verticalmente. */
}

.contenido-hero h2,
.contenido-hero p {
    color: var(--blanco);
}

.contenido-hero .ubicacion {
    /* Para alinear horizontalmente la ubicación. */
    display: flex;
    /* Para alinear hacia abajo. */
    align-items: flex-end;
}

/* En este bloque vamos a crearle los estilos css grid. estos nos permite abrir la ubicación y tamaño de los
elementos de nuestro sitio web (En una área definida), mientras que en flex-box el contenido crece automáticamente. */
@media (min-width: 768px) {
    .servicios {
        /* Se tiene acceso a las dos dimensiones; es decir, se puede definir el contenido de izquierda a derecha o de arriba 
    hacia abajo. */
        display: grid;
        /* Es lo mismo que sí escribieramos 33.3% por cada columna o 1fr 1fr 1fr.*/
        grid-template-columns: repeat(3, 1fr);
        /* Con esta línea se tiene control total sobre cuanto quieres que sea la separación de las columnas. */
        column-gap: 1rem;
    }
}

/* En este bloque vamos a crearle los estilos a la clase servicio. */
.servicio {
    display: flex;
    flex-direction: column;
    align-items: center;
}

.servicio h3 {
    color: var(--secundario);
    font-weight: normal;
}

.servicio p {
    line-height: 2;
    /* Este es el interlineado del parrafo. */
    text-align: center;
}

.servicio .iconos {
    height: 15rem;
    width: 15rem;
    background-color: var(--primario);
    border-radius: 50%;
    /* Con esta línea creamos una circunferencia.*/
    display: flex;
    /* Este display coloca los iconos uno frente al otro y nos da acceso al justify-content. */
    justify-content: space-evenly;
    align-items: center;
}

/* Aquí vamos a darle estilos a una tabla sencilla. */
table {
    font-family: arial, sans-serif;
    border-collapse: collapse;
    width: 100%;
}

td,
th {
    border: 1px solid #dddddd;
    text-align: left;
    padding: 8px;
}

tr:nth-child(even) {
    background-color: #dddddd;
}

/* En este bloque vamos a crearle los estilos al contacto como al formulario. */
.formulario {
    background-color: var(--gris);
    /* Lo que hace este min es tomar o asignarle el ancho a este formulario y utiliza el valor más pequeño, qué
  sea entre 60rem o el 1005. */
    width: min(60rem, 100%);
    /* Este margin auto se utiliza en el caso del formulario cuyo padre no es un display flex y lo centra a su vez. */
    margin: 0 auto;
    /* Y este padding se utiliza para darle el espacio en todas las direcciones. */
    padding: 2rem;
    /* En este padding es para redondear las esquinas del formulario. */
    border-radius: 1rem;
}

.formulario fieldset {
    border: none;
}

/* En este bloque se encuentran los estilos de la leyenda "Contactanos llenando todos los campos". */
.formulario legend {
    /* Para centrar el texto de la leyenda. */
    text-align: center;
    /* Para darle un tamaño adecuado a las letras del texto de la leyenda. */
    font-size: 1.8rem;
    /* Para transformar a mayúsculas. */
    text-transform: uppercase;
    /* Par que esté en negrita se utiliza el font weight. */
    font-weight: 700;
    /* Aquí para colocarle un margen hacia abajo y que se separe del primer input. */
    margin-bottom: 2rem;
    color: var(--primario);
}

/* Aquí vamos a darle estilos a los campos nombres y teléfonos. */
@media (min-width: 768px) {
    .contenedor-campos {
        display: grid;
        /* Recordemos esto; al utlizar repeat (1fr, 1fr) es lo mismo que tener dos columnas iguales de 50% cada una;
      a su vez nos permite definir las áreas de las columnas. */
        grid-template-columns: repeat(50% 50%);
        /* ahora en la siguiente línea nos permite darle estilos a las filas. */
        grid-template-rows: auto auto 20rem;
        /* ahora en la siguiente línea nos permite separar las columnas. */
        column-gap: 1rem;
    }

    /* Aquí se seleccionan los campos con un Pseudo-selector nth child. y este lo lo que nos va a permitir es sí hay
  cuatro clases que se llaman igual, se le puede poner el número del orden que tengamos los label en el HTML, para 
  este caso, tenemos Nombre, Teléfono, Correo y mensaje respectivamente. */
    .campo:nth-child(3),
    .campo:nth-child(4) {
        /* Con esta línea nos permite posicionar desde la uno a la tres. */
        grid-column: 1 / 3;
    }
}

/* Aquí está el bloque de los campos del formulario. */
.campo {
    margin-bottom: 1rem;
}

.campo label {
    color: var(--blanco);
    font-weight: bold;
    margin-bottom: .5rem;
    display: block;
}

/* Aquí le damos los estilos a la altura del text area y el campo. */
.campo textarea {
    height: 20rem;
}

/* Desde este bloque vamos a darle los estilos a los inputs del formulario. */
.input-text {
    width: 100%;
    border: none;
    padding: 1.5rem;
    border-radius: .5rem;
}

/* Aquí inicia nuestro pie de página. */
.footer {
    text-align: center;
}